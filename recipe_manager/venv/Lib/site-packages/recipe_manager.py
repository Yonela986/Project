import tkinter as tk
from tkinter import messagebox, simpledialog
import json
import bcrypt
import os

# Constants for file names
USER_DATA_FILE = "user_data.json"
RECIPE_DATA_FILE = "recipes.json"

# Load user data from a JSON file
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r') as file:
            return json.load(file)
    return {}

# Save user data to a JSON file
def save_user_data(data):
    with open(USER_DATA_FILE, 'w') as file:
        json.dump(data, file)

# Load recipes from a JSON file
def load_recipes():
    if os.path.exists(RECIPE_DATA_FILE):
        with open(RECIPE_DATA_FILE, 'r') as file:
            return json.load(file)
    return {}

# Save recipes to a JSON file
def save_recipes(data):
    with open(RECIPE_DATA_FILE, 'w') as file:
        json.dump(data, file)

# Main application class
class RecipeManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Recipe Manager")

        self.user_data = load_user_data()
        self.recipes = load_recipes()
        self.current_user = None

        # Create frames
        self.frames = {
            "login": self.create_login_frame(),
            "register": self.create_register_frame(),
            "recipe_manager": self.create_recipe_manager_frame()
        }

        self.show_frame("login")

    def create_login_frame(self):
        frame = tk.Frame(self.root)
        tk.Label(frame, text="Login").pack()
        tk.Label(frame, text="Username:").pack()
        self.login_username = tk.Entry(frame)
        self.login_username.pack()

        tk.Label(frame, text="Password:").pack()
        self.login_password = tk.Entry(frame, show='*')
        self.login_password.pack()

        tk.Button(frame, text="Login", command=self.login).pack()
        tk.Button(frame, text="Register", command=lambda: self.show_frame("register")).pack()
        
        return frame

    def create_register_frame(self):
        frame = tk.Frame(self.root)
        tk.Label(frame, text="Register").pack()
        tk.Label(frame, text="Username:").pack()
        self.register_username = tk.Entry(frame)
        self.register_username.pack()

        tk.Label(frame, text="Password:").pack()
        self.register_password = tk.Entry(frame, show='*')
        self.register_password.pack()

        tk.Button(frame, text="Register", command=self.register).pack()
        tk.Button(frame, text="Back to Login", command=lambda: self.show_frame("login")).pack()
        
        return frame

    def create_recipe_manager_frame(self):
        frame = tk.Frame(self.root)
        tk.Label(frame, text="Recipe Manager").pack()
        tk.Button(frame, text="Add Recipe", command=self.add_recipe).pack()
        tk.Button(frame, text="View Recipes", command=self.view_recipes).pack()
        tk.Button(frame, text="Logout", command=lambda: self.show_frame("login")).pack()
        
        return frame

    def show_frame(self, frame_name):
        # Hide all frames
        for frame in self.frames.values():
            frame.pack_forget()
        
        # Show the requested frame
        self.frames[frame_name].pack(padx=10, pady=10)

    def login(self):
        username = self.login_username.get()
        password = self.login_password.get().encode('utf-8')

        if username in self.user_data:
            if bcrypt.checkpw(password, self.user_data[username]['password'].encode('utf-8')):
                self.current_user = username
                messagebox.showinfo("Login Successful", f"Welcome {username}!")
                self.show_frame("recipe_manager")
            else:
                messagebox.showerror("Login Failed", "Incorrect password.")
        else:
            messagebox.showerror("Login Failed", "User does not exist.")

    def register(self):
        username = self.register_username.get()
        password = self.register_password.get().encode('utf-8')

        if username in self.user_data:
            messagebox.showerror("Registration Failed", "User already exists.")
        else:
            hashed_password = bcrypt.hashpw(password, bcrypt.gensalt()).decode('utf-8')
            self.user_data[username] = {'password': hashed_password}
            save_user_data(self.user_data)
            messagebox.showinfo("Registration Successful", "You can now log in.")
            self.show_frame("login")

    def add_recipe(self):
        recipe_name = simpledialog.askstring("Recipe Name", "Enter the recipe name:")
        recipe_details = simpledialog.askstring("Recipe Details", "Enter the recipe details:")
        
        if recipe_name and recipe_details:
            if self.current_user not in self.recipes:
                self.recipes[self.current_user] = {}
            self.recipes[self.current_user][recipe_name] = recipe_details
            save_recipes(self.recipes)
            messagebox.showinfo("Success", "Recipe added successfully!")
        else:
            messagebox.showwarning("Input Error", "Please enter both name and details.")

    def view_recipes(self):
        if self.current_user in self.recipes:
            recipes = self.recipes[self.current_user]
            recipe_list = "\n".join(f"{name}: {details}" for name, details in recipes.items())
            messagebox.showinfo("Your Recipes", recipe_list if recipe_list else "No recipes found.")
        else:
            messagebox.showinfo("Your Recipes", "No recipes found.")

if __name__ == "__main__":
    root = tk.Tk()
    app = RecipeManager(root)
    root.mainloop()
